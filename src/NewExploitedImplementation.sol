// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;
import {NewExploitedStorage} from "./NewExploitedStorage.sol";

interface IUSDC {
    function transferFrom(
        address _from,
        address _to,
        uint256 _amount
    ) external returns (bool);

    function transfer(address _to, uint256 _amount) external returns (bool);
}

contract NewExploitedImplementation is NewExploitedStorage {
    modifier onlyAdmin() {
        require(
            msg.sender == adminAddress,
            "only admin can call this function"
        );
        _;
    }

    /// @dev Triggered when the contract has been initialized or reinitialized.
    event Initialized(uint8 version);

    modifier initializer() {
        bool isTopLevelCall = !initializing;
        require(
            (isTopLevelCall && initialized < 1) ||
                (!(address(this).code.length > 0) && initialized == 1),
            "Initializable: contract is already initialized"
        );
        initialized = 1;
        if (isTopLevelCall) {
            initializing = true;
        }
        _;
        if (isTopLevelCall) {
            initializing = false;
            emit Initialized(1);
        }
    }

    modifier notPaused() {
        require(!paused, "contract is paused");
        _;
    }

    function initialize() public initializer {
        adminAddress = msg.sender;
    }

    function pause() public onlyAdmin {
        paused = true;
    }

    function unPause() public onlyAdmin {
        paused = false;
    }

    function depositUSDC(uint256 _amount) public notPaused {
        userUSDCBalance[msg.sender] += _amount;
        IUSDC(usdcToken).transferFrom(msg.sender, address(this), _amount);
    }

    function depositETH() public payable notPaused {
        userETHBalance[msg.sender] += msg.value;
    }

    function withdrawUSDC(
        uint256 _amount,
        address withdrawalAddress
    ) public notPaused {
        userUSDCBalance[withdrawalAddress] -= _amount;
        IUSDC(usdcToken).transfer(msg.sender, _amount);
    }

    function withdrawETH(uint256 _amount) public notPaused {
        require(userETHBalance[msg.sender] >= _amount, "not enough balance");
        userETHBalance[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
    }

    function isPaused() public view returns (uint8) {
        return paused ? 1 : 0;
    }
}
