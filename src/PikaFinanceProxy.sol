// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;
import {OriginalStorage} from "./OriginalStorage.sol";

contract PikaFinanceProxy is OriginalStorage {
    /// @dev Triggered when the contract has been initialized or reinitialized.
    event Initialized(uint8 version);

    constructor() {
        adminAddress = msg.sender;
    }

    /// @dev receive ether
    receive() external payable {
        revert("cannot receive Ether");
    }

    /// @dev fallback function , execute on undefined function call
    fallback() external payable {
        _fallback();
    }

    modifier onlyAdmin() {
        require(
            msg.sender == adminAddress,
            "only admin can call this function"
        );
        _;
    }

    function upgradeToAndCall(
        address _implementation,
        bytes calldata _data
    ) public onlyAdmin {
        _upgradeTo(_implementation);
        (bool success, ) = _implementation.delegatecall(_data);
        require(success, "delegatecall failed");
    }

    function upgradeTo(address _implementation) public onlyAdmin {
        _upgradeTo(_implementation);
    }

    function _upgradeTo(address _implementation) internal {
        require(implementation != _implementation, "implementation is same");
        implementation = _implementation;
    }

    function _fallback() internal {
        address _impl = implementation;
        require(_impl != address(0), "implementation is not set");

        assembly {
            let ptr := mload(0x40)
            calldatacopy(ptr, 0, calldatasize())
            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)
            returndatacopy(ptr, 0, returndatasize())

            switch result
            case 0 {
                revert(ptr, returndatasize())
            }
            default {
                return(ptr, returndatasize())
            }
        }
    }
}
